# 실시간 채팅 애플리케이션

이 프로젝트는 React와 FastAPI를 사용한 실시간 채팅 애플리케이션입니다.

## 프로젝트 구조

### 1. Nginx
- 역할: React의 빌드 파일들을 서비스하는 웹 서버
- 주요 기능: 정적 파일 제공, 리버스 프록시, 로드 밸런싱

### 2. Frontend (React)

#### 주요 컴포넌트
1. `App.js`
   - 역할: 애플리케이션의 메인 컴포넌트
   - 주요 기능:
     - 전체 레이아웃 관리
     - 인증 상태 관리 (로그인/로그아웃)
     - 테마 전환 (다크 모드/라이트 모드)
     - WebSocket 연결 관리 (useWebSocket 훅 사용)
     - 인증 모달 표시 관리
     - 세션 만료 처리

2. `ChatPage.js`
   - 역할: 채팅 페이지 컴포넌트
   - 주요 기능:
     - 채팅 메시지 상태 관리
     - WebSocket을 통한 실시간 메시지 수신 및 표시
     - 메시지 전송 처리
     - 사용자 변경 시 메시지 초기화

3. `AuthModal.js`
   - 역할: 인증 모달 컴포넌트
   - 주요 기능:
     - 로그인 및 회원가입 폼 제공
     - 입력 유효성 검사 (이메일, 비밀번호 등)
     - API를 통한 인증 처리
     - 에러 처리 및 표시

4. `ChatMessages.js`
   - 역할: 채팅 메시지 표시 컴포넌트
   - 주요 기능:
     - 메시지 목록 렌더링
     - 자동 스크롤 관리
     - 시스템 메시지와 사용자 메시지 구분 표시
     - Unicode 문자열 디코딩

5. `ChatInput.js`
   - 역할: 채팅 입력 컴포넌트
   - 주요 기능:
     - 메시지 입력 처리
     - 메시지 길이 제한 (최대 30자)
     - 채팅 금지 상태 관리
     - 전송 버튼 상태 관리 (비활성화 조건 처리)

#### 커스텀 훅 및 컨텍스트
6. `useWebSocket.js`
   - 역할: WebSocket 관리를 위한 커스텀 React 훅
   - 주요 기능:
     - WebSocket 연결 설정 및 관리
     - 재연결 로직 (지수 백오프 및 지터 적용)
     - 메시지 송수신 처리
     - 사용자 수, 세션 만료, 채팅 금지 상태 관리

7. `ThemeContext.js`
   - 역할: 테마 관리를 위한 React Context
   - 주요 기능:
     - 다크 모드/라이트 모드 상태 관리
     - 로컬 스토리지를 이용한 테마 설정 유지
     - 테마 전환 함수 제공

8. urls.js
    - 역할: 애플리케이션에서 사용되는 URL 관리를 위한 중앙 집중식 파일
    - 주요 기능:
     - 기본 URL(BASE_URL) 정의 및 관리
     - API 엔드포인트 URL 정의 (예: 로그인, 회원가입)
     - WebSocket URL 동적 생성
     - 다른 컴포넌트에서 재사용 가능한 URL 객체 제공

#### 스타일
- `base.css`: 기본 레이아웃, 색상 스키마, 반응형 디자인 정의
- `components.css`: 버튼, 입력 필드, 메시지 스타일 등 컴포넌트별 스타일 정의
- `utilities.css`: 다크 모드 스타일, 유틸리티 클래스 정의
- `App.css`: 전체 애플리케이션 레이아웃 및 공통 스타일 정의
- `AuthModal.css`: 인증 모달 특정 스타일 정의

### 3. Backend (FastAPI)

1. `main.py`
   - 역할: FastAPI 애플리케이션의 주 진입점
   - 주요 기능:
     - FastAPI 애플리케이션 및 라우트 정의
     - CORS 미들웨어 설정
     - WebSocket 연결 처리
     - 사용자 인증 (로그인/회원가입) 엔드포인트
     - 최근 메시지 조회 엔드포인트
     - 백그라운드 작업 시작 및 종료 관리

2. `connection_manager.py`
   - 역할: WebSocket 연결 및 실시간 메시지 브로드캐스팅 관리
   - 주요 기능:
     - 활성 WebSocket 연결 관리
     - 메시지 브로드캐스팅
     - 스팸 방지 및 사용자 차단 로직 (최근 메시지 5개 중 4개가 같으면 스팸으로 간주)
     - 연결된 사용자 수 추적
     - 주기적인 연결 상태 확인 및 정리 (60초마다)

3. `postgresql_manager.py`
   - 역할: PostgreSQL 데이터베이스 연결 및 쿼리 실행
   - 주요 기능:
     - 데이터베이스 연결 풀 관리
     - 사용자 등록 및 로그인 처리 (비밀번호 해싱 포함)
     - 메시지 저장 및 조회
     - 사용자 정보 조회
     - 파티션 테이블 관리 (날짜별 메시지 저장)

4. `background_tasks.py`
   - 역할: 비동기 백그라운드 작업 관리
   - 주요 기능:
     - 주기적인 사용자 수 업데이트 및 브로드캐스팅 (1초마다)
     - 오래된 데이터 정리 (1시간마다)
     - 연결 상태 확인 (60초마다)
     - Redis와 PostgreSQL 간 메시지 동기화 (10초 또는 50개 메시지마다)

5. `db_schema.py`
   - 역할: 데이터베이스 스키마 정의 및 초기화
   - 주요 기능:
     - 사용자, 메시지, 세션 테이블 생성
     - 파티션 테이블 생성 및 관리 함수 정의 (7일치 파티션 자동 생성)
     - 데이터베이스 초기화 로직

6. `error_handlers.py`
   - 역할: 에러 처리를 위한 데코레이터 제공
   - 주요 기능:
     - 데이터베이스 및 Redis 작업 중 발생하는 예외 처리
     - 에러 로깅 및 사용자 친화적인 에러 메시지 반환
     - 특정 예외 (예: 중복 데이터 삽입) 에 대한 처리

7. `redis_manager.py`
   - 역할: Redis 연결 및 작업 관리
   - 주요 기능:
     - Redis 연결 설정 및 관리
     - 메시지 캐싱 및 임시 저장 (최근 500개)
     - 활성 연결 관리
     - 최근 메시지 조회 및 관리
     - 사용자별 최근 메시지 저장 (최근 50개)

### 4. PostgreSQL
- 역할: 영구 데이터 저장소
- 주요 기능:
  - 날짜별 메시지 저장 (파티션 테이블 사용)
  - 사용자 정보 저장
  - 해당 날짜 테이블이 존재하지 않을 시 일주일 치 테이블 자동 생성

### 5. Redis
- 역할: 인-메모리 데이터 저장소
- 주요 기능:
  - 실시간 메시지 캐싱
  - 활성 연결 관리
  - 최근 메시지 임시 저장 (전체 500개, 사용자별 50개)

## 현재 버그 목록

## 수정이 필요해 보이는 부분
db에 날짜별로 파이셔닝 되니 시간만 저장하게 수정
db에 저장할 떄 메세지 아이디는 저장 생략

## 기능 추가 목록
1. Kafka 통합 - 메시지 큐 시스템 도입으로 확장성 개선
3. JWT 토큰 추가 - 보안 강화 및 사용자 인증 개선
4. 사용자 접속 정보 저장
5. 닉네임, 비밀번호 변경 기능

## 시작하기