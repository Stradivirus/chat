{"ast":null,"code":"var _jsxFileName = \"/home/work/chat/front/src/pages/ChatPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport ChatMessages from '../components/ChatMessages';\nimport ChatInput from '../components/ChatInput';\n\n// ChatPage 컴포넌트: 채팅 페이지의 전체 구조를 담당\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatPage({\n  socket,\n  user,\n  chatBanTimeLeft,\n  sendMessage\n}) {\n  _s();\n  // 메시지 목록을 관리하는 상태\n  const [messages, setMessages] = useState([]);\n\n  // 메시지 전송 핸들러\n  const handleSendMessage = useCallback(messageText => {\n    if (user) {\n      // 메시지 객체 생성\n      const messageObj = {\n        message: messageText,\n        sender: user.userId,\n        username: user.username,\n        timestamp: Date.now()\n      };\n      // 메시지 전송\n      sendMessage(messageObj);\n    } else {\n      console.error('User is not logged in');\n    }\n  }, [user, sendMessage]);\n\n  // WebSocket 메시지 수신 처리\n  useEffect(() => {\n    if (!socket) return;\n    const handleMessage = event => {\n      const data = JSON.parse(event.data);\n\n      // 사용자 수 업데이트나 채팅 금지 메시지가 아닌 경우에만 처리\n      if (data.type !== 'user_count' && data.type !== 'chat_banned') {\n        setMessages(prev => {\n          // 중복 메시지 체크\n          const isDuplicate = prev.some(msg => msg.timestamp === data.timestamp);\n          // 빈 메시지 체크\n          const isEmptyContent = !data.message || data.message.trim() === '' || data.message === '내용 없음';\n\n          // 중복이거나 빈 메시지면 이전 상태 그대로 반환\n          if (isDuplicate || isEmptyContent) return prev;\n\n          // 새 메시지를 기존 메시지 목록에 추가\n          return [...prev, data];\n        });\n      }\n    };\n\n    // WebSocket 메시지 이벤트 리스너 등록\n    socket.addEventListener('message', handleMessage);\n\n    // 컴포넌트 언마운트 시 이벤트 리스너 제거\n    return () => {\n      socket.removeEventListener('message', handleMessage);\n    };\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-page\",\n    children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n      messages: messages,\n      currentUserId: user === null || user === void 0 ? void 0 : user.userId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSendMessage: handleSendMessage,\n      isLoggedIn: !!user,\n      chatBanTimeLeft: chatBanTimeLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatPage, \"HfRglZYSsAsHKuz/ZJXLgM/MN88=\");\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ChatMessages","ChatInput","jsxDEV","_jsxDEV","ChatPage","socket","user","chatBanTimeLeft","sendMessage","_s","messages","setMessages","handleSendMessage","messageText","messageObj","message","sender","userId","username","timestamp","Date","now","console","error","handleMessage","event","data","JSON","parse","type","prev","isDuplicate","some","msg","isEmptyContent","trim","addEventListener","removeEventListener","className","children","currentUserId","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","isLoggedIn","_c","$RefreshReg$"],"sources":["/home/work/chat/front/src/pages/ChatPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport ChatMessages from '../components/ChatMessages';\nimport ChatInput from '../components/ChatInput';\n\n// ChatPage 컴포넌트: 채팅 페이지의 전체 구조를 담당\nfunction ChatPage({ socket, user, chatBanTimeLeft, sendMessage }) {\n  // 메시지 목록을 관리하는 상태\n  const [messages, setMessages] = useState([]);\n\n  // 메시지 전송 핸들러\n  const handleSendMessage = useCallback((messageText) => {\n    if (user) {\n      // 메시지 객체 생성\n      const messageObj = {\n        message: messageText,\n        sender: user.userId,\n        username: user.username,\n        timestamp: Date.now()\n      };\n      // 메시지 전송\n      sendMessage(messageObj);\n    } else {\n      console.error('User is not logged in');\n    }\n  }, [user, sendMessage]);\n\n  // WebSocket 메시지 수신 처리\n  useEffect(() => {\n    if (!socket) return;\n\n    const handleMessage = (event) => {\n      const data = JSON.parse(event.data);\n            \n      // 사용자 수 업데이트나 채팅 금지 메시지가 아닌 경우에만 처리\n      if (data.type !== 'user_count' && data.type !== 'chat_banned') {\n        setMessages(prev => {\n          // 중복 메시지 체크\n          const isDuplicate = prev.some(msg => msg.timestamp === data.timestamp);\n          // 빈 메시지 체크\n          const isEmptyContent = !data.message || data.message.trim() === '' || data.message === '내용 없음';\n          \n          // 중복이거나 빈 메시지면 이전 상태 그대로 반환\n          if (isDuplicate || isEmptyContent) return prev;\n\n          // 새 메시지를 기존 메시지 목록에 추가\n          return [...prev, data];\n        });\n      }\n    };\n\n    // WebSocket 메시지 이벤트 리스너 등록\n    socket.addEventListener('message', handleMessage);\n\n    // 컴포넌트 언마운트 시 이벤트 리스너 제거\n    return () => {\n      socket.removeEventListener('message', handleMessage);\n    };\n  }, [socket]);\n\n  return (\n    <div className=\"chat-page\">\n      {/* 채팅 메시지 표시 컴포넌트 */}\n      <ChatMessages messages={messages} currentUserId={user?.userId} />\n      {/* 채팅 입력 컴포넌트 */}\n      <ChatInput \n        onSendMessage={handleSendMessage} \n        isLoggedIn={!!user}\n        chatBanTimeLeft={chatBanTimeLeft}\n      />\n    </div>\n  );\n}\n\nexport default ChatPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}