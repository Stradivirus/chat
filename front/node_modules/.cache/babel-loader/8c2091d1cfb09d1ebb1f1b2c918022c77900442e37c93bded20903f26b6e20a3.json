{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';// 테마 컨텍스트 생성\nimport{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext();// ThemeProvider 컴포넌트 정의\nexport const ThemeProvider=_ref=>{let{children}=_ref;// 다크 모드 상태를 관리하는 state\nconst[isDarkMode,setIsDarkMode]=useState(false);// 컴포넌트 마운트 시 로컬 스토리지에서 저장된 테마 불러오기\nuseEffect(()=>{const savedTheme=localStorage.getItem('theme');if(savedTheme==='dark'){setIsDarkMode(true);}},[]);// 빈 배열을 넣어 마운트 시에만 실행\n// 테마 토글 함수\nconst toggleTheme=()=>{setIsDarkMode(!isDarkMode);// 현재 상태의 반대로 설정\nlocalStorage.setItem('theme',!isDarkMode?'dark':'light');// 로컬 스토리지에 테마 저장\n};// ThemeContext.Provider를 사용하여 자식 컴포넌트에게 테마 상태와 토글 함수 제공\nreturn/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{isDarkMode,toggleTheme},children:children});};// 커스텀 훅: 다른 컴포넌트에서 테마 상태와 토글 함수를 쉽게 사용할 수 있게 함\nexport const useTheme=()=>useContext(ThemeContext);","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsx","_jsx","ThemeContext","ThemeProvider","_ref","children","isDarkMode","setIsDarkMode","savedTheme","localStorage","getItem","toggleTheme","setItem","Provider","value","useTheme"],"sources":["/home/work/chat/front/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// 테마 컨텍스트 생성\nconst ThemeContext = createContext();\n\n// ThemeProvider 컴포넌트 정의\nexport const ThemeProvider = ({ children }) => {\n  // 다크 모드 상태를 관리하는 state\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  // 컴포넌트 마운트 시 로컬 스토리지에서 저장된 테마 불러오기\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark') {\n      setIsDarkMode(true);\n    }\n  }, []); // 빈 배열을 넣어 마운트 시에만 실행\n\n  // 테마 토글 함수\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode); // 현재 상태의 반대로 설정\n    localStorage.setItem('theme', !isDarkMode ? 'dark' : 'light'); // 로컬 스토리지에 테마 저장\n  };\n\n  // ThemeContext.Provider를 사용하여 자식 컴포넌트에게 테마 상태와 토글 함수 제공\n  return (\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// 커스텀 훅: 다른 컴포넌트에서 테마 상태와 토글 함수를 쉽게 사용할 수 있게 함\nexport const useTheme = () => useContext(ThemeContext);"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAE7E;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAAC,CAAC,CAEpC;AACA,MAAO,MAAM,CAAAO,aAAa,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC;AACA,KAAM,CAACE,UAAU,CAAEC,aAAa,CAAC,CAAGV,QAAQ,CAAC,KAAK,CAAC,CAEnD;AACAE,SAAS,CAAC,IAAM,CACd,KAAM,CAAAS,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAChD,GAAIF,UAAU,GAAK,MAAM,CAAE,CACzBD,aAAa,CAAC,IAAI,CAAC,CACrB,CACF,CAAC,CAAE,EAAE,CAAC,CAAE;AAER;AACA,KAAM,CAAAI,WAAW,CAAGA,CAAA,GAAM,CACxBJ,aAAa,CAAC,CAACD,UAAU,CAAC,CAAE;AAC5BG,YAAY,CAACG,OAAO,CAAC,OAAO,CAAE,CAACN,UAAU,CAAG,MAAM,CAAG,OAAO,CAAC,CAAE;AACjE,CAAC,CAED;AACA,mBACEL,IAAA,CAACC,YAAY,CAACW,QAAQ,EAACC,KAAK,CAAE,CAAER,UAAU,CAAEK,WAAY,CAAE,CAAAN,QAAA,CACvDA,QAAQ,CACY,CAAC,CAE5B,CAAC,CAED;AACA,MAAO,MAAM,CAAAU,QAAQ,CAAGA,CAAA,GAAMjB,UAAU,CAACI,YAAY,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}