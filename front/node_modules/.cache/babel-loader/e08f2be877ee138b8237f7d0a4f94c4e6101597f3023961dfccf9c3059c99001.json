{"ast":null,"code":"var _jsxFileName = \"/home/work/chat/front/src/components/ChatMessages.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\n\n// ChatMessages 컴포넌트: 채팅 메시지를 표시하는 컴포넌트\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatMessages({\n  messages,\n  currentUserId\n}) {\n  _s();\n  // 메시지 목록의 끝을 참조하기 위한 ref\n  const messagesEndRef = useRef(null);\n\n  // 메시지 목록의 맨 아래로 스크롤하는 함수\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  // messages 배열이 변경될 때마다 스크롤을 아래로 이동\n  useEffect(scrollToBottom, [messages]);\n\n  // Unicode 문자열을 디코딩하는 함수\n  const decodeUnicode = str => {\n    return str.replace(/\\\\u[\\dA-F]{4}/gi, match => {\n      return String.fromCharCode(parseInt(match.replace(/\\\\u/g, ''), 16));\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-messages\",\n    children: [messages.map((message, index) => {\n      let messageContent, sender_id, username;\n\n      // 메시지가 문자열인 경우 JSON 파싱 시도\n      if (typeof message === 'string') {\n        try {\n          const parsedMessage = JSON.parse(message);\n          messageContent = parsedMessage.message;\n          sender_id = parsedMessage.sender_id;\n          username = parsedMessage.username;\n        } catch (e) {\n          console.error(\"Failed to parse message:\", e);\n          return null;\n        }\n      } else {\n        // 메시지가 객체인 경우 직접 값 할당\n        messageContent = message.message;\n        sender_id = message.sender_id;\n        username = message.username;\n      }\n\n      // 시스템 메시지인 경우 Unicode 디코딩\n      if (sender_id === 'system' || message.type === 'system') {\n        messageContent = decodeUnicode(messageContent);\n      }\n\n      // 메시지 내용이 없거나 빈 문자열인 경우 렌더링하지 않음\n      if (!messageContent || messageContent.trim() === '' || messageContent === '내용 없음') {\n        return null;\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${sender_id === currentUserId ? 'user' : sender_id === 'system' ? 'system' : 'other'}`,\n        children: [sender_id !== currentUserId && sender_id !== 'system' && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"message-username\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: username || 'Anonymous'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 50\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: messageContent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: messagesEndRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatMessages, \"0epSoi03NVSoD0I0FiLK4iVNXOA=\");\n_c = ChatMessages;\nexport default ChatMessages;\nvar _c;\n$RefreshReg$(_c, \"ChatMessages\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","ChatMessages","messages","currentUserId","_s","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","decodeUnicode","str","replace","match","String","fromCharCode","parseInt","className","children","map","message","index","messageContent","sender_id","username","parsedMessage","JSON","parse","e","console","error","type","trim","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/home/work/chat/front/src/components/ChatMessages.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\n// ChatMessages 컴포넌트: 채팅 메시지를 표시하는 컴포넌트\nfunction ChatMessages({ messages, currentUserId }) {\n  // 메시지 목록의 끝을 참조하기 위한 ref\n  const messagesEndRef = useRef(null);\n\n  // 메시지 목록의 맨 아래로 스크롤하는 함수\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  // messages 배열이 변경될 때마다 스크롤을 아래로 이동\n  useEffect(scrollToBottom, [messages]);\n\n  // Unicode 문자열을 디코딩하는 함수\n  const decodeUnicode = (str) => {\n    return str.replace(/\\\\u[\\dA-F]{4}/gi, (match) => {\n      return String.fromCharCode(parseInt(match.replace(/\\\\u/g, ''), 16));\n    });\n  };\n\n  return (\n    <div className=\"chat-messages\">\n      {messages.map((message, index) => {\n        let messageContent, sender_id, username;\n        \n        // 메시지가 문자열인 경우 JSON 파싱 시도\n        if (typeof message === 'string') {\n          try {\n            const parsedMessage = JSON.parse(message);\n            messageContent = parsedMessage.message;\n            sender_id = parsedMessage.sender_id;\n            username = parsedMessage.username;\n          } catch (e) {\n            console.error(\"Failed to parse message:\", e);\n            return null;\n          }\n        } else {\n          // 메시지가 객체인 경우 직접 값 할당\n          messageContent = message.message;\n          sender_id = message.sender_id;\n          username = message.username;\n        }\n\n        // 시스템 메시지인 경우 Unicode 디코딩\n        if (sender_id === 'system' || message.type === 'system') {\n          messageContent = decodeUnicode(messageContent);\n        }\n\n        // 메시지 내용이 없거나 빈 문자열인 경우 렌더링하지 않음\n        if (!messageContent || messageContent.trim() === '' || messageContent === '내용 없음') {\n          return null;\n        }\n\n        return (\n          <div \n            key={index} \n            className={`message ${sender_id === currentUserId ? 'user' : (sender_id === 'system' ? 'system' : 'other')}`}\n          >\n            {/* 다른 사용자의 메시지인 경우 사용자 이름 표시 */}\n            {sender_id !== currentUserId && sender_id !== 'system' && (\n              <span className=\"message-username\"><strong>{username || 'Anonymous'}</strong> </span>\n            )}\n            <span>{messageContent}</span>\n          </div>\n        );\n      })}\n      {/* 메시지 목록의 끝을 나타내는 빈 div */}\n      <div ref={messagesEndRef} />\n    </div>\n  );\n}\n\nexport default ChatMessages;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}