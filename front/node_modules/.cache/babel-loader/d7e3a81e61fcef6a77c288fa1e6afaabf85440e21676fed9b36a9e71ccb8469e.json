{"ast":null,"code":"import React,{useState,useEffect}from'react';import axios from'axios';import'../styles/AuthModal.css';import{URLS}from'../urls';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const api=axios.create({baseURL:URLS.API_BASE_URL,withCredentials:true});function AuthModal(_ref){let{onLoginSuccess}=_ref;const[email,setEmail]=useState('');const[username,setUsername]=useState('');const[nickname,setNickname]=useState('');const[password,setPassword]=useState('');const[confirmPassword,setConfirmPassword]=useState('');const[errors,setErrors]=useState({});const[duplicates,setDuplicates]=useState({});const[isLoading,setIsLoading]=useState(false);const[isLoginMode,setIsLoginMode]=useState(true);useEffect(()=>{if(!isLoginMode&&username.length>=4){checkDuplicate('username');}},[username,isLoginMode]);useEffect(()=>{if(!isLoginMode&&email.length>0){checkDuplicate('email');}},[email,isLoginMode]);useEffect(()=>{if(!isLoginMode&&nickname.length>=2){checkDuplicate('nickname');}},[nickname,isLoginMode]);const validateForm=()=>{const newErrors={};if(!isLoginMode){if(!email||!/\\S+@\\S+\\.\\S+/.test(email)){newErrors.email='유효한 이메일 주소를 입력해주세요.';}if(!nickname||nickname.length<2){newErrors.nickname='닉네임은 2자 이상이어야 합니다.';}if(password!==confirmPassword){newErrors.confirmPassword='비밀번호가 일치하지 않습니다.';}}if(!username||username.length<4){newErrors.username='아이디는 4자 이상이어야 합니다.';}if(!password||password.length<8){newErrors.password='비밀번호는 8자 이상이어야 합니다.';}setErrors(newErrors);return Object.keys(newErrors).length===0;};const checkDuplicate=async field=>{if(!isLoginMode&&(field==='email'||field==='username'||field==='nickname')){try{const response=await api.post(URLS.CHECK_DUPLICATE,{[field]:eval(field)});if(response.data.isDuplicate){setDuplicates(prev=>({...prev,[field]:`이 ${field==='email'?'이메일':field==='username'?'아이디':'닉네임'}은 이미 사용 중입니다.`}));}else{setDuplicates(prev=>({...prev,[field]:null}));}}catch(error){console.error('Error checking duplicate:',error);}}};const handleSubmit=async e=>{e.preventDefault();if(validateForm()&&!Object.values(duplicates).some(Boolean)){setIsLoading(true);try{let response;if(isLoginMode){response=await api.post(URLS.LOGIN,{username,password});console.log('Login response:',response.data);if(response.data&&response.data.user_id){onLoginSuccess({userId:response.data.user_id,username:username});}else{throw new Error('Invalid server response');}}else{response=await api.post(URLS.REGISTER,{email,username,nickname,password});console.log('Registration successful:',response.data);if(response.data&&response.data.user_id){onLoginSuccess({userId:response.data.user_id,username:username});}}setIsLoading(false);}catch(error){console.error('Error:',error.response?error.response.data:error.message);setErrors({api:error.response?error.response.data.detail:'서버 오류가 발생했습니다.'});setIsLoading(false);}}};const toggleMode=()=>{setIsLoginMode(!isLoginMode);setErrors({});setDuplicates({});setEmail('');setUsername('');setNickname('');setPassword('');setConfirmPassword('');};return/*#__PURE__*/_jsxs(\"div\",{className:\"auth-modal\",children:[/*#__PURE__*/_jsx(\"h2\",{children:isLoginMode?'로그인':'회원가입'}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[!isLoginMode&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"input\",{type:\"email\",placeholder:\"\\uC774\\uBA54\\uC77C\",value:email,onChange:e=>setEmail(e.target.value),required:true}),errors.email&&/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:errors.email}),duplicates.email&&/*#__PURE__*/_jsx(\"p\",{className:\"duplicate-error\",children:duplicates.email}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"\\uC544\\uC774\\uB514\",value:username,onChange:e=>setUsername(e.target.value),required:true}),errors.username&&/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:errors.username}),duplicates.username&&/*#__PURE__*/_jsx(\"p\",{className:\"duplicate-error\",children:duplicates.username}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"\\uB2C9\\uB124\\uC784\",value:nickname,onChange:e=>setNickname(e.target.value),required:true}),errors.nickname&&/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:errors.nickname}),duplicates.nickname&&/*#__PURE__*/_jsx(\"p\",{className:\"duplicate-error\",children:duplicates.nickname})]}),isLoginMode&&/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"\\uC544\\uC774\\uB514\",value:username,onChange:e=>setUsername(e.target.value),required:true}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\",value:password,onChange:e=>setPassword(e.target.value),required:true}),errors.password&&/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:errors.password}),!isLoginMode&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"input\",{type:\"password\",placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",value:confirmPassword,onChange:e=>setConfirmPassword(e.target.value),required:true}),errors.confirmPassword&&/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:errors.confirmPassword})]}),errors.api&&/*#__PURE__*/_jsx(\"p\",{className:\"error\",children:errors.api}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:isLoading||Object.values(duplicates).some(Boolean),children:isLoading?'처리 중...':isLoginMode?'로그인':'회원가입'})]}),/*#__PURE__*/_jsx(\"button\",{onClick:toggleMode,className:\"switch-auth-type\",children:isLoginMode?'회원가입':'로그인'})]});}export default AuthModal;","map":{"version":3,"names":["React","useState","useEffect","axios","URLS","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","api","create","baseURL","API_BASE_URL","withCredentials","AuthModal","_ref","onLoginSuccess","email","setEmail","username","setUsername","nickname","setNickname","password","setPassword","confirmPassword","setConfirmPassword","errors","setErrors","duplicates","setDuplicates","isLoading","setIsLoading","isLoginMode","setIsLoginMode","length","checkDuplicate","validateForm","newErrors","test","Object","keys","field","response","post","CHECK_DUPLICATE","eval","data","isDuplicate","prev","error","console","handleSubmit","e","preventDefault","values","some","Boolean","LOGIN","log","user_id","userId","Error","REGISTER","message","detail","toggleMode","className","children","onSubmit","type","placeholder","value","onChange","target","required","disabled","onClick"],"sources":["/home/work/chat/front/src/components/AuthModal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '../styles/AuthModal.css';\nimport { URLS } from '../urls';\n\nconst api = axios.create({\n  baseURL: URLS.API_BASE_URL,\n  withCredentials: true\n});\n\nfunction AuthModal({ onLoginSuccess }) {\n  const [email, setEmail] = useState('');\n  const [username, setUsername] = useState('');\n  const [nickname, setNickname] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [errors, setErrors] = useState({});\n  const [duplicates, setDuplicates] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n\n  useEffect(() => {\n    if (!isLoginMode && username.length >= 4) {\n      checkDuplicate('username');\n    }\n  }, [username, isLoginMode]);\n\n  useEffect(() => {\n    if (!isLoginMode && email.length > 0) {\n      checkDuplicate('email');\n    }\n  }, [email, isLoginMode]);\n\n  useEffect(() => {\n    if (!isLoginMode && nickname.length >= 2) {\n      checkDuplicate('nickname');\n    }\n  }, [nickname, isLoginMode]);\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!isLoginMode) {\n      if (!email || !/\\S+@\\S+\\.\\S+/.test(email)) {\n        newErrors.email = '유효한 이메일 주소를 입력해주세요.';\n      }\n      if (!nickname || nickname.length < 2) {\n        newErrors.nickname = '닉네임은 2자 이상이어야 합니다.';\n      }\n      if (password !== confirmPassword) {\n        newErrors.confirmPassword = '비밀번호가 일치하지 않습니다.';\n      }\n    }\n\n    if (!username || username.length < 4) {\n      newErrors.username = '아이디는 4자 이상이어야 합니다.';\n    }\n    if (!password || password.length < 8) {\n      newErrors.password = '비밀번호는 8자 이상이어야 합니다.';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const checkDuplicate = async (field) => {\n    if (!isLoginMode && (field === 'email' || field === 'username' || field === 'nickname')) {\n      try {\n        const response = await api.post(URLS.CHECK_DUPLICATE, { [field]: eval(field) });\n        if (response.data.isDuplicate) {\n          setDuplicates(prev => ({ ...prev, [field]: `이 ${field === 'email' ? '이메일' : field === 'username' ? '아이디' : '닉네임'}은 이미 사용 중입니다.` }));\n        } else {\n          setDuplicates(prev => ({ ...prev, [field]: null }));\n        }\n      } catch (error) {\n        console.error('Error checking duplicate:', error);\n      }\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (validateForm() && !Object.values(duplicates).some(Boolean)) {\n      setIsLoading(true);\n      try {\n        let response;\n        if (isLoginMode) {\n          response = await api.post(URLS.LOGIN, { username, password });\n          console.log('Login response:', response.data);\n          if (response.data && response.data.user_id) {\n            onLoginSuccess({\n              userId: response.data.user_id,\n              username: username\n            });\n          } else {\n            throw new Error('Invalid server response');\n          }\n        } else {\n          response = await api.post(URLS.REGISTER, { email, username, nickname, password });\n          console.log('Registration successful:', response.data);\n          if (response.data && response.data.user_id) {\n            onLoginSuccess({\n              userId: response.data.user_id,\n              username: username\n            });\n          }\n        }\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error:', error.response ? error.response.data : error.message);\n        setErrors({ api: error.response ? error.response.data.detail : '서버 오류가 발생했습니다.' });\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const toggleMode = () => {\n    setIsLoginMode(!isLoginMode);\n    setErrors({});\n    setDuplicates({});\n    setEmail('');\n    setUsername('');\n    setNickname('');\n    setPassword('');\n    setConfirmPassword('');\n  };\n\n  return (\n    <div className=\"auth-modal\">\n      <h2>{isLoginMode ? '로그인' : '회원가입'}</h2>\n      <form onSubmit={handleSubmit}>\n        {!isLoginMode && (\n          <>\n            <input\n              type=\"email\"\n              placeholder=\"이메일\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              required\n            />\n            {errors.email && <p className=\"error\">{errors.email}</p>}\n            {duplicates.email && <p className=\"duplicate-error\">{duplicates.email}</p>}\n            <input\n              type=\"text\"\n              placeholder=\"아이디\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              required\n            />\n            {errors.username && <p className=\"error\">{errors.username}</p>}\n            {duplicates.username && <p className=\"duplicate-error\">{duplicates.username}</p>}\n            <input\n              type=\"text\"\n              placeholder=\"닉네임\"\n              value={nickname}\n              onChange={(e) => setNickname(e.target.value)}\n              required\n            />\n            {errors.nickname && <p className=\"error\">{errors.nickname}</p>}\n            {duplicates.nickname && <p className=\"duplicate-error\">{duplicates.nickname}</p>}\n          </>\n        )}\n        {isLoginMode && (\n          <input\n            type=\"text\"\n            placeholder=\"아이디\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            required\n          />\n        )}\n        <input\n          type=\"password\"\n          placeholder=\"비밀번호\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n        {errors.password && <p className=\"error\">{errors.password}</p>}\n        {!isLoginMode && (\n          <>\n            <input\n              type=\"password\"\n              placeholder=\"비밀번호 확인\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              required\n            />\n            {errors.confirmPassword && <p className=\"error\">{errors.confirmPassword}</p>}\n          </>\n        )}\n        {errors.api && <p className=\"error\">{errors.api}</p>}\n        <button type=\"submit\" disabled={isLoading || Object.values(duplicates).some(Boolean)}>\n          {isLoading ? '처리 중...' : (isLoginMode ? '로그인' : '회원가입')}\n        </button>\n      </form>\n      <button onClick={toggleMode} className=\"switch-auth-type\">\n        {isLoginMode ? '회원가입' : '로그인'}\n      </button>\n    </div>\n  );\n}\n\nexport default AuthModal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}