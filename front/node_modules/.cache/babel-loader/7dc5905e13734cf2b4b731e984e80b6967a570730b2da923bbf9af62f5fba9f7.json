{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import ChatMessages from'../components/ChatMessages';import ChatInput from'../components/ChatInput';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ChatPage(_ref){let{socket,user,chatBanTimeLeft}=_ref;// 채팅 메시지를 저장하는 상태\nconst[messages,setMessages]=useState([]);// 메시지 전송 핸들러 함수\n// useCallback을 사용하여 불필요한 재생성 방지\nconst handleSendMessage=useCallback(messageText=>{// 소켓이 연결되어 있고 사용자가 로그인한 상태인지 확인\nif(socket&&socket.readyState===WebSocket.OPEN&&user){// 메시지 객체 생성\nconst messageObj={message:messageText,sender:user.userId,username:user.username,timestamp:Date.now()};// 소켓을 통해 메시지 전송\nsocket.send(JSON.stringify(messageObj));}else{console.error('WebSocket is not connected or user is not logged in');}},[socket,user]);// 소켓 메시지 수신 처리를 위한 useEffect\nuseEffect(()=>{if(!socket)return;// 메시지 수신 핸들러 함수\nconst handleMessage=event=>{const data=JSON.parse(event.data);console.log('Received message in ChatPage:',data);// 사용자 수 업데이트나 채팅 금지 메시지가 아닌 경우에만 처리\nif(data.type!=='user_count'&&data.type!=='chat_banned'){setMessages(prev=>{// 중복 메시지 체크\nconst isDuplicate=prev.some(msg=>msg.timestamp===data.timestamp);if(isDuplicate)return prev;// 새 메시지 추가\nreturn[...prev,data];});}};// 소켓에 메시지 이벤트 리스너 추가\nsocket.addEventListener('message',handleMessage);// 컴포넌트 언마운트 시 이벤트 리스너 제거\nreturn()=>{socket.removeEventListener('message',handleMessage);};},[socket]);return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-page\",children:[/*#__PURE__*/_jsx(ChatMessages,{messages:messages,currentUserId:user===null||user===void 0?void 0:user.userId}),/*#__PURE__*/_jsx(ChatInput,{onSendMessage:handleSendMessage,isLoggedIn:!!user// 사용자 로그인 여부\n,chatBanTimeLeft:chatBanTimeLeft// 채팅 금지 남은 시간\n})]});}export default ChatPage;","map":{"version":3,"names":["React","useState","useEffect","useCallback","ChatMessages","ChatInput","jsx","_jsx","jsxs","_jsxs","ChatPage","_ref","socket","user","chatBanTimeLeft","messages","setMessages","handleSendMessage","messageText","readyState","WebSocket","OPEN","messageObj","message","sender","userId","username","timestamp","Date","now","send","JSON","stringify","console","error","handleMessage","event","data","parse","log","type","prev","isDuplicate","some","msg","addEventListener","removeEventListener","className","children","currentUserId","onSendMessage","isLoggedIn"],"sources":["/home/work/chat/front/src/pages/ChatPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport ChatMessages from '../components/ChatMessages';\nimport ChatInput from '../components/ChatInput';\n\nfunction ChatPage({ socket, user, chatBanTimeLeft }) {\n  // 채팅 메시지를 저장하는 상태\n  const [messages, setMessages] = useState([]);\n\n  // 메시지 전송 핸들러 함수\n  // useCallback을 사용하여 불필요한 재생성 방지\n  const handleSendMessage = useCallback((messageText) => {\n    // 소켓이 연결되어 있고 사용자가 로그인한 상태인지 확인\n    if (socket && socket.readyState === WebSocket.OPEN && user) {\n      // 메시지 객체 생성\n      const messageObj = {\n        message: messageText,\n        sender: user.userId,\n        username: user.username,\n        timestamp: Date.now()\n      };\n      // 소켓을 통해 메시지 전송\n      socket.send(JSON.stringify(messageObj));\n    } else {\n      console.error('WebSocket is not connected or user is not logged in');\n    }\n  }, [socket, user]);\n\n  // 소켓 메시지 수신 처리를 위한 useEffect\n  useEffect(() => {\n    if (!socket) return;\n\n    // 메시지 수신 핸들러 함수\n    const handleMessage = (event) => {\n      const data = JSON.parse(event.data);\n      console.log('Received message in ChatPage:', data);\n      \n      // 사용자 수 업데이트나 채팅 금지 메시지가 아닌 경우에만 처리\n      if (data.type !== 'user_count' && data.type !== 'chat_banned') {\n        setMessages(prev => {\n          // 중복 메시지 체크\n          const isDuplicate = prev.some(msg => msg.timestamp === data.timestamp);\n          if (isDuplicate) return prev;\n\n          // 새 메시지 추가\n          return [...prev, data];\n        });\n      }\n    };\n\n    // 소켓에 메시지 이벤트 리스너 추가\n    socket.addEventListener('message', handleMessage);\n\n    // 컴포넌트 언마운트 시 이벤트 리스너 제거\n    return () => {\n      socket.removeEventListener('message', handleMessage);\n    };\n  }, [socket]);\n\n  return (\n    <div className=\"chat-page\">\n      {/* 채팅 메시지 표시 컴포넌트 */}\n      <ChatMessages messages={messages} currentUserId={user?.userId} />\n      {/* 채팅 입력 컴포넌트 */}\n      <ChatInput \n        onSendMessage={handleSendMessage} \n        isLoggedIn={!!user} // 사용자 로그인 여부\n        chatBanTimeLeft={chatBanTimeLeft} // 채팅 금지 남은 시간\n      />\n    </div>\n  );\n}\n\nexport default ChatPage;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CAC/D,MAAO,CAAAC,YAAY,KAAM,4BAA4B,CACrD,MAAO,CAAAC,SAAS,KAAM,yBAAyB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEhD,QAAS,CAAAC,QAAQA,CAAAC,IAAA,CAAoC,IAAnC,CAAEC,MAAM,CAAEC,IAAI,CAAEC,eAAgB,CAAC,CAAAH,IAAA,CACjD;AACA,KAAM,CAACI,QAAQ,CAAEC,WAAW,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CAE5C;AACA;AACA,KAAM,CAAAgB,iBAAiB,CAAGd,WAAW,CAAEe,WAAW,EAAK,CACrD;AACA,GAAIN,MAAM,EAAIA,MAAM,CAACO,UAAU,GAAKC,SAAS,CAACC,IAAI,EAAIR,IAAI,CAAE,CAC1D;AACA,KAAM,CAAAS,UAAU,CAAG,CACjBC,OAAO,CAAEL,WAAW,CACpBM,MAAM,CAAEX,IAAI,CAACY,MAAM,CACnBC,QAAQ,CAAEb,IAAI,CAACa,QAAQ,CACvBC,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CACtB,CAAC,CACD;AACAjB,MAAM,CAACkB,IAAI,CAACC,IAAI,CAACC,SAAS,CAACV,UAAU,CAAC,CAAC,CACzC,CAAC,IAAM,CACLW,OAAO,CAACC,KAAK,CAAC,qDAAqD,CAAC,CACtE,CACF,CAAC,CAAE,CAACtB,MAAM,CAAEC,IAAI,CAAC,CAAC,CAElB;AACAX,SAAS,CAAC,IAAM,CACd,GAAI,CAACU,MAAM,CAAE,OAEb;AACA,KAAM,CAAAuB,aAAa,CAAIC,KAAK,EAAK,CAC/B,KAAM,CAAAC,IAAI,CAAGN,IAAI,CAACO,KAAK,CAACF,KAAK,CAACC,IAAI,CAAC,CACnCJ,OAAO,CAACM,GAAG,CAAC,+BAA+B,CAAEF,IAAI,CAAC,CAElD;AACA,GAAIA,IAAI,CAACG,IAAI,GAAK,YAAY,EAAIH,IAAI,CAACG,IAAI,GAAK,aAAa,CAAE,CAC7DxB,WAAW,CAACyB,IAAI,EAAI,CAClB;AACA,KAAM,CAAAC,WAAW,CAAGD,IAAI,CAACE,IAAI,CAACC,GAAG,EAAIA,GAAG,CAACjB,SAAS,GAAKU,IAAI,CAACV,SAAS,CAAC,CACtE,GAAIe,WAAW,CAAE,MAAO,CAAAD,IAAI,CAE5B;AACA,MAAO,CAAC,GAAGA,IAAI,CAAEJ,IAAI,CAAC,CACxB,CAAC,CAAC,CACJ,CACF,CAAC,CAED;AACAzB,MAAM,CAACiC,gBAAgB,CAAC,SAAS,CAAEV,aAAa,CAAC,CAEjD;AACA,MAAO,IAAM,CACXvB,MAAM,CAACkC,mBAAmB,CAAC,SAAS,CAAEX,aAAa,CAAC,CACtD,CAAC,CACH,CAAC,CAAE,CAACvB,MAAM,CAAC,CAAC,CAEZ,mBACEH,KAAA,QAAKsC,SAAS,CAAC,WAAW,CAAAC,QAAA,eAExBzC,IAAA,CAACH,YAAY,EAACW,QAAQ,CAAEA,QAAS,CAACkC,aAAa,CAAEpC,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAEY,MAAO,CAAE,CAAC,cAEjElB,IAAA,CAACF,SAAS,EACR6C,aAAa,CAAEjC,iBAAkB,CACjCkC,UAAU,CAAE,CAAC,CAACtC,IAAM;AAAA,CACpBC,eAAe,CAAEA,eAAiB;AAAA,CACnC,CAAC,EACC,CAAC,CAEV,CAEA,cAAe,CAAAJ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}