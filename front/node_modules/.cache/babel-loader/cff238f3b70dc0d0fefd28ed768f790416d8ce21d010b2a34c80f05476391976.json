{"ast":null,"code":"import{useState,useEffect,useCallback,useRef}from'react';// WebSocket 서버 URL\nconst WS_URL='ws://218.156.126.186:8000/ws';// useWebSocket 커스텀 훅: WebSocket 연결 및 관련 기능을 관리\nexport function useWebSocket(user){// 상태 관리\nconst[socket,setSocket]=useState(null);// WebSocket 인스턴스\nconst[userCount,setUserCount]=useState(0);// 현재 접속 사용자 수\nconst[showSessionExpiredModal,setShowSessionExpiredModal]=useState(false);// 세션 만료 모달 표시 여부\nconst[chatBanTimeLeft,setChatBanTimeLeft]=useState(0);// 채팅 금지 남은 시간\n// ref를 사용한 값 관리\nconst reconnectAttempt=useRef(0);// 재연결 시도 횟수\nconst timeoutId=useRef(null);// 재연결 타이머 ID\n// WebSocket 설정 및 연결 함수\nconst setupWebSocket=useCallback(()=>{if(!user)return;const newSocket=new WebSocket(`${WS_URL}/${user.userId}`);// WebSocket 연결 성공 시\nnewSocket.onopen=()=>{console.log('WebSocket Connected');setSocket(newSocket);reconnectAttempt.current=0;};// 서버로부터 메시지 수신 시\nnewSocket.onmessage=event=>{const data=JSON.parse(event.data);if(data.type==='user_count'){setUserCount(data.count);}else if(data.type==='session_expired'){setShowSessionExpiredModal(true);}else if(data.type==='chat_banned'){setChatBanTimeLeft(data.time_left);}};// WebSocket 연결 종료 시\nnewSocket.onclose=event=>{if(event.code!==1000){// 1000은 정상 종료 코드\nconsole.log('WebSocket Disconnected');// 지수 백오프 및 지터를 사용한 재연결 로직\nconst timeout=Math.min(1000*2**reconnectAttempt.current,30000);const jitter=Math.random()*1000;console.log(`Attempting to reconnect in ${timeout+jitter}ms...`);timeoutId.current=setTimeout(()=>{reconnectAttempt.current++;setupWebSocket();},timeout+jitter);}};// WebSocket 에러 발생 시\nnewSocket.onerror=error=>{console.error('WebSocket Error:',error);};},[user]);// 사용자 정보가 변경될 때 WebSocket 연결 설정\nuseEffect(()=>{if(user){setupWebSocket();}return()=>{if(socket){socket.close(1000,\"Intentional disconnect\");}if(timeoutId.current){clearTimeout(timeoutId.current);}};},[user,setupWebSocket]);// 채팅 금지 시간 카운트다운\nuseEffect(()=>{if(chatBanTimeLeft>0){const timer=setInterval(()=>{setChatBanTimeLeft(prev=>Math.max(0,prev-1));},1000);return()=>clearInterval(timer);}},[chatBanTimeLeft]);// 메시지 전송 함수\nconst sendMessage=useCallback(messageObj=>{if(socket&&socket.readyState===WebSocket.OPEN){socket.send(JSON.stringify(messageObj));}else{console.error('WebSocket is not connected');}},[socket]);// 훅에서 반환하는 값들\nreturn{socket,userCount,showSessionExpiredModal,setShowSessionExpiredModal,chatBanTimeLeft,sendMessage};}","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","WS_URL","useWebSocket","user","socket","setSocket","userCount","setUserCount","showSessionExpiredModal","setShowSessionExpiredModal","chatBanTimeLeft","setChatBanTimeLeft","reconnectAttempt","timeoutId","setupWebSocket","newSocket","WebSocket","userId","onopen","console","log","current","onmessage","event","data","JSON","parse","type","count","time_left","onclose","code","timeout","Math","min","jitter","random","setTimeout","onerror","error","close","clearTimeout","timer","setInterval","prev","max","clearInterval","sendMessage","messageObj","readyState","OPEN","send","stringify"],"sources":["/home/work/chat/front/src/hooks/useWebSocket.js"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\n\n// WebSocket 서버 URL\nconst WS_URL = 'ws://218.156.126.186:8000/ws';\n\n// useWebSocket 커스텀 훅: WebSocket 연결 및 관련 기능을 관리\nexport function useWebSocket(user) {\n  // 상태 관리\n  const [socket, setSocket] = useState(null);  // WebSocket 인스턴스\n  const [userCount, setUserCount] = useState(0);  // 현재 접속 사용자 수\n  const [showSessionExpiredModal, setShowSessionExpiredModal] = useState(false);  // 세션 만료 모달 표시 여부\n  const [chatBanTimeLeft, setChatBanTimeLeft] = useState(0);  // 채팅 금지 남은 시간\n\n  // ref를 사용한 값 관리\n  const reconnectAttempt = useRef(0);  // 재연결 시도 횟수\n  const timeoutId = useRef(null);  // 재연결 타이머 ID\n\n  // WebSocket 설정 및 연결 함수\n  const setupWebSocket = useCallback(() => {\n    if (!user) return;\n\n    const newSocket = new WebSocket(`${WS_URL}/${user.userId}`);\n\n    // WebSocket 연결 성공 시\n    newSocket.onopen = () => {\n      console.log('WebSocket Connected');\n      setSocket(newSocket);\n      reconnectAttempt.current = 0;\n    };\n\n    // 서버로부터 메시지 수신 시\n    newSocket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'user_count') {\n        setUserCount(data.count);\n      } else if (data.type === 'session_expired') {\n        setShowSessionExpiredModal(true);\n      } else if (data.type === 'chat_banned') {\n        setChatBanTimeLeft(data.time_left);\n      }\n    };\n\n    // WebSocket 연결 종료 시\n    newSocket.onclose = (event) => {\n      if (event.code !== 1000) {  // 1000은 정상 종료 코드\n        console.log('WebSocket Disconnected');\n        // 지수 백오프 및 지터를 사용한 재연결 로직\n        const timeout = Math.min(1000 * (2 ** reconnectAttempt.current), 30000);\n        const jitter = Math.random() * 1000;\n        console.log(`Attempting to reconnect in ${timeout + jitter}ms...`);\n        \n        timeoutId.current = setTimeout(() => {\n          reconnectAttempt.current++;\n          setupWebSocket();\n        }, timeout + jitter);\n      }\n    };\n\n    // WebSocket 에러 발생 시\n    newSocket.onerror = (error) => {\n      console.error('WebSocket Error:', error);\n    };\n  }, [user]);\n\n  // 사용자 정보가 변경될 때 WebSocket 연결 설정\n  useEffect(() => {\n    if (user) {\n      setupWebSocket();\n    }\n    return () => {\n      if (socket) {\n        socket.close(1000, \"Intentional disconnect\");\n      }\n      if (timeoutId.current) {\n        clearTimeout(timeoutId.current);\n      }\n    };\n  }, [user, setupWebSocket]);\n\n  // 채팅 금지 시간 카운트다운\n  useEffect(() => {\n    if (chatBanTimeLeft > 0) {\n      const timer = setInterval(() => {\n        setChatBanTimeLeft((prev) => Math.max(0, prev - 1));\n      }, 1000);\n      return () => clearInterval(timer);\n    }\n  }, [chatBanTimeLeft]);\n\n  // 메시지 전송 함수\n  const sendMessage = useCallback((messageObj) => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(JSON.stringify(messageObj));\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  }, [socket]);\n\n  // 훅에서 반환하는 값들\n  return {\n    socket,\n    userCount,\n    showSessionExpiredModal,\n    setShowSessionExpiredModal,\n    chatBanTimeLeft,\n    sendMessage\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}