{"ast":null,"code":"import React,{useState,useEffect,useCallback}from'react';import ChatMessages from'../components/ChatMessages';import ChatInput from'../components/ChatInput';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ChatPage(_ref){let{socket,user,chatBanTimeLeft}=_ref;// 채팅 메시지를 저장하는 상태\nconst[messages,setMessages]=useState([]);// 메시지 전송 핸들러 함수\nconst handleSendMessage=useCallback(messageText=>{if(socket&&socket.readyState===WebSocket.OPEN&&user){const messageObj={message:messageText,sender:user.userId,username:user.username,timestamp:Date.now()};socket.send(JSON.stringify(messageObj));}else{console.error('WebSocket is not connected or user is not logged in');}},[socket,user]);// 소켓 메시지 수신 처리를 위한 useEffect\nuseEffect(()=>{if(!socket)return;const handleMessage=event=>{const data=JSON.parse(event.data);if(data.type!=='user_count'&&data.type!=='chat_banned'){setMessages(prev=>{// 중복 메시지 체크\nconst isDuplicate=prev.some(msg=>msg.timestamp===data.timestamp);// '내용 없음' 메시지 체크\nconst isEmptyContent=!data.message||data.message.trim()===''||data.message==='내용 없음';// 중복이거나 내용이 없는 메시지는 무시\nif(isDuplicate||isEmptyContent)return prev;// 새 메시지 추가\nreturn[...prev,data];});}};socket.addEventListener('message',handleMessage);return()=>{socket.removeEventListener('message',handleMessage);};},[socket]);return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-page\",children:[/*#__PURE__*/_jsx(ChatMessages,{messages:messages,currentUserId:user===null||user===void 0?void 0:user.userId}),/*#__PURE__*/_jsx(ChatInput,{onSendMessage:handleSendMessage,isLoggedIn:!!user,chatBanTimeLeft:chatBanTimeLeft})]});}export default ChatPage;","map":{"version":3,"names":["React","useState","useEffect","useCallback","ChatMessages","ChatInput","jsx","_jsx","jsxs","_jsxs","ChatPage","_ref","socket","user","chatBanTimeLeft","messages","setMessages","handleSendMessage","messageText","readyState","WebSocket","OPEN","messageObj","message","sender","userId","username","timestamp","Date","now","send","JSON","stringify","console","error","handleMessage","event","data","parse","type","prev","isDuplicate","some","msg","isEmptyContent","trim","addEventListener","removeEventListener","className","children","currentUserId","onSendMessage","isLoggedIn"],"sources":["/home/work/chat/front/src/pages/ChatPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport ChatMessages from '../components/ChatMessages';\nimport ChatInput from '../components/ChatInput';\n\nfunction ChatPage({ socket, user, chatBanTimeLeft }) {\n  // 채팅 메시지를 저장하는 상태\n  const [messages, setMessages] = useState([]);\n\n  // 메시지 전송 핸들러 함수\n  const handleSendMessage = useCallback((messageText) => {\n    if (socket && socket.readyState === WebSocket.OPEN && user) {\n      const messageObj = {\n        message: messageText,\n        sender: user.userId,\n        username: user.username,\n        timestamp: Date.now()\n      };\n      socket.send(JSON.stringify(messageObj));\n    } else {\n      console.error('WebSocket is not connected or user is not logged in');\n    }\n  }, [socket, user]);\n\n  // 소켓 메시지 수신 처리를 위한 useEffect\n  useEffect(() => {\n    if (!socket) return;\n\n    const handleMessage = (event) => {\n      const data = JSON.parse(event.data);\n            \n      if (data.type !== 'user_count' && data.type !== 'chat_banned') {\n        setMessages(prev => {\n          // 중복 메시지 체크\n          const isDuplicate = prev.some(msg => msg.timestamp === data.timestamp);\n          // '내용 없음' 메시지 체크\n          const isEmptyContent = !data.message || data.message.trim() === '' || data.message === '내용 없음';\n          \n          // 중복이거나 내용이 없는 메시지는 무시\n          if (isDuplicate || isEmptyContent) return prev;\n\n          // 새 메시지 추가\n          return [...prev, data];\n        });\n      }\n    };\n\n    socket.addEventListener('message', handleMessage);\n\n    return () => {\n      socket.removeEventListener('message', handleMessage);\n    };\n  }, [socket]);\n\n  return (\n    <div className=\"chat-page\">\n      <ChatMessages messages={messages} currentUserId={user?.userId} />\n      <ChatInput \n        onSendMessage={handleSendMessage} \n        isLoggedIn={!!user}\n        chatBanTimeLeft={chatBanTimeLeft}\n      />\n    </div>\n  );\n}\n\nexport default ChatPage;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CAC/D,MAAO,CAAAC,YAAY,KAAM,4BAA4B,CACrD,MAAO,CAAAC,SAAS,KAAM,yBAAyB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEhD,QAAS,CAAAC,QAAQA,CAAAC,IAAA,CAAoC,IAAnC,CAAEC,MAAM,CAAEC,IAAI,CAAEC,eAAgB,CAAC,CAAAH,IAAA,CACjD;AACA,KAAM,CAACI,QAAQ,CAAEC,WAAW,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CAE5C;AACA,KAAM,CAAAgB,iBAAiB,CAAGd,WAAW,CAAEe,WAAW,EAAK,CACrD,GAAIN,MAAM,EAAIA,MAAM,CAACO,UAAU,GAAKC,SAAS,CAACC,IAAI,EAAIR,IAAI,CAAE,CAC1D,KAAM,CAAAS,UAAU,CAAG,CACjBC,OAAO,CAAEL,WAAW,CACpBM,MAAM,CAAEX,IAAI,CAACY,MAAM,CACnBC,QAAQ,CAAEb,IAAI,CAACa,QAAQ,CACvBC,SAAS,CAAEC,IAAI,CAACC,GAAG,CAAC,CACtB,CAAC,CACDjB,MAAM,CAACkB,IAAI,CAACC,IAAI,CAACC,SAAS,CAACV,UAAU,CAAC,CAAC,CACzC,CAAC,IAAM,CACLW,OAAO,CAACC,KAAK,CAAC,qDAAqD,CAAC,CACtE,CACF,CAAC,CAAE,CAACtB,MAAM,CAAEC,IAAI,CAAC,CAAC,CAElB;AACAX,SAAS,CAAC,IAAM,CACd,GAAI,CAACU,MAAM,CAAE,OAEb,KAAM,CAAAuB,aAAa,CAAIC,KAAK,EAAK,CAC/B,KAAM,CAAAC,IAAI,CAAGN,IAAI,CAACO,KAAK,CAACF,KAAK,CAACC,IAAI,CAAC,CAEnC,GAAIA,IAAI,CAACE,IAAI,GAAK,YAAY,EAAIF,IAAI,CAACE,IAAI,GAAK,aAAa,CAAE,CAC7DvB,WAAW,CAACwB,IAAI,EAAI,CAClB;AACA,KAAM,CAAAC,WAAW,CAAGD,IAAI,CAACE,IAAI,CAACC,GAAG,EAAIA,GAAG,CAAChB,SAAS,GAAKU,IAAI,CAACV,SAAS,CAAC,CACtE;AACA,KAAM,CAAAiB,cAAc,CAAG,CAACP,IAAI,CAACd,OAAO,EAAIc,IAAI,CAACd,OAAO,CAACsB,IAAI,CAAC,CAAC,GAAK,EAAE,EAAIR,IAAI,CAACd,OAAO,GAAK,OAAO,CAE9F;AACA,GAAIkB,WAAW,EAAIG,cAAc,CAAE,MAAO,CAAAJ,IAAI,CAE9C;AACA,MAAO,CAAC,GAAGA,IAAI,CAAEH,IAAI,CAAC,CACxB,CAAC,CAAC,CACJ,CACF,CAAC,CAEDzB,MAAM,CAACkC,gBAAgB,CAAC,SAAS,CAAEX,aAAa,CAAC,CAEjD,MAAO,IAAM,CACXvB,MAAM,CAACmC,mBAAmB,CAAC,SAAS,CAAEZ,aAAa,CAAC,CACtD,CAAC,CACH,CAAC,CAAE,CAACvB,MAAM,CAAC,CAAC,CAEZ,mBACEH,KAAA,QAAKuC,SAAS,CAAC,WAAW,CAAAC,QAAA,eACxB1C,IAAA,CAACH,YAAY,EAACW,QAAQ,CAAEA,QAAS,CAACmC,aAAa,CAAErC,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAEY,MAAO,CAAE,CAAC,cACjElB,IAAA,CAACF,SAAS,EACR8C,aAAa,CAAElC,iBAAkB,CACjCmC,UAAU,CAAE,CAAC,CAACvC,IAAK,CACnBC,eAAe,CAAEA,eAAgB,CAClC,CAAC,EACC,CAAC,CAEV,CAEA,cAAe,CAAAJ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}