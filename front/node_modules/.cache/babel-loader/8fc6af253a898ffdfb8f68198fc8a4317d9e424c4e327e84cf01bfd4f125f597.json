{"ast":null,"code":"var _jsxFileName = \"/home/work/chat/front/src/contexts/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// 테마 컨텍스트 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n\n// ThemeProvider 컴포넌트 정의\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // 다크 모드 상태를 관리하는 state\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  // 컴포넌트 마운트 시 로컬 스토리지에서 저장된 테마 불러오기\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark') {\n      setIsDarkMode(true);\n    }\n  }, []); // 빈 배열을 넣어 마운트 시에만 실행\n\n  // 테마 토글 함수\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode); // 현재 상태의 반대로 설정\n    localStorage.setItem('theme', !isDarkMode ? 'dark' : 'light'); // 로컬 스토리지에 테마 저장\n  };\n\n  // ThemeContext.Provider를 사용하여 자식 컴포넌트에게 테마 상태와 토글 함수 제공\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n// 커스텀 훅: 다른 컴포넌트에서 테마 상태와 토글 함수를 쉽게 사용할 수 있게 함\n_s(ThemeProvider, \"bUs4CHDjU8AH+ZZYt8wlh4bHppI=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","isDarkMode","setIsDarkMode","savedTheme","localStorage","getItem","toggleTheme","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","$RefreshReg$"],"sources":["/home/work/chat/front/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\n// 테마 컨텍스트 생성\nconst ThemeContext = createContext();\n\n// ThemeProvider 컴포넌트 정의\nexport const ThemeProvider = ({ children }) => {\n  // 다크 모드 상태를 관리하는 state\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  // 컴포넌트 마운트 시 로컬 스토리지에서 저장된 테마 불러오기\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme === 'dark') {\n      setIsDarkMode(true);\n    }\n  }, []); // 빈 배열을 넣어 마운트 시에만 실행\n\n  // 테마 토글 함수\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode); // 현재 상태의 반대로 설정\n    localStorage.setItem('theme', !isDarkMode ? 'dark' : 'light'); // 로컬 스토리지에 테마 저장\n  };\n\n  // ThemeContext.Provider를 사용하여 자식 컴포넌트에게 테마 상태와 토글 함수 제공\n  return (\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// 커스텀 훅: 다른 컴포넌트에서 테마 상태와 토글 함수를 쉽게 사용할 수 있게 함\nexport const useTheme = () => useContext(ThemeContext);"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMO,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACAE,SAAS,CAAC,MAAM;IACd,MAAMS,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,KAAK,MAAM,EAAE;MACzBD,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxBJ,aAAa,CAAC,CAACD,UAAU,CAAC,CAAC,CAAC;IAC5BG,YAAY,CAACG,OAAO,CAAC,OAAO,EAAE,CAACN,UAAU,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC;EACjE,CAAC;;EAED;EACA,oBACEL,OAAA,CAACC,YAAY,CAACW,QAAQ;IAACC,KAAK,EAAE;MAAER,UAAU;MAAEK;IAAY,CAAE;IAAAP,QAAA,EACvDA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;;AAED;AAAAb,EAAA,CA1BaF,aAAa;AAAAgB,EAAA,GAAbhB,aAAa;AA2B1B,OAAO,MAAMiB,QAAQ,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMvB,UAAU,CAACI,YAAY,CAAC;AAAA;AAACmB,GAAA,CAA1CD,QAAQ;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}